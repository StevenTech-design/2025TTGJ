
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class typeChart : Luban.BeanBase
{
    public typeChart(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["against_bug"].IsNumber) { throw new SerializationException(); }  AgainstBug = _buf["against_bug"]; }
        { if(!_buf["against_dark"].IsNumber) { throw new SerializationException(); }  AgainstDark = _buf["against_dark"]; }
        { if(!_buf["against_dragon"].IsNumber) { throw new SerializationException(); }  AgainstDragon = _buf["against_dragon"]; }
        { if(!_buf["against_electric"].IsNumber) { throw new SerializationException(); }  AgainstElectric = _buf["against_electric"]; }
        { if(!_buf["against_fairy"].IsNumber) { throw new SerializationException(); }  AgainstFairy = _buf["against_fairy"]; }
        { if(!_buf["against_fight"].IsNumber) { throw new SerializationException(); }  AgainstFight = _buf["against_fight"]; }
        { if(!_buf["against_fire"].IsNumber) { throw new SerializationException(); }  AgainstFire = _buf["against_fire"]; }
        { if(!_buf["against_flying"].IsNumber) { throw new SerializationException(); }  AgainstFlying = _buf["against_flying"]; }
        { if(!_buf["against_ghost"].IsNumber) { throw new SerializationException(); }  AgainstGhost = _buf["against_ghost"]; }
        { if(!_buf["against_grass"].IsNumber) { throw new SerializationException(); }  AgainstGrass = _buf["against_grass"]; }
        { if(!_buf["against_ground"].IsNumber) { throw new SerializationException(); }  AgainstGround = _buf["against_ground"]; }
        { if(!_buf["against_ice"].IsNumber) { throw new SerializationException(); }  AgainstIce = _buf["against_ice"]; }
        { if(!_buf["against_normal"].IsNumber) { throw new SerializationException(); }  AgainstNormal = _buf["against_normal"]; }
        { if(!_buf["against_poison"].IsNumber) { throw new SerializationException(); }  AgainstPoison = _buf["against_poison"]; }
        { if(!_buf["against_psychic"].IsNumber) { throw new SerializationException(); }  AgainstPsychic = _buf["against_psychic"]; }
        { if(!_buf["against_rock"].IsNumber) { throw new SerializationException(); }  AgainstRock = _buf["against_rock"]; }
        { if(!_buf["against_steel"].IsNumber) { throw new SerializationException(); }  AgainstSteel = _buf["against_steel"]; }
        { if(!_buf["against_water"].IsNumber) { throw new SerializationException(); }  AgainstWater = _buf["against_water"]; }
    }

    public static typeChart DeserializetypeChart(JSONNode _buf)
    {
        return new typeChart(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 攻击属性
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 虫
    /// </summary>
    public readonly float AgainstBug;
    /// <summary>
    /// 恶
    /// </summary>
    public readonly float AgainstDark;
    /// <summary>
    /// 龙
    /// </summary>
    public readonly float AgainstDragon;
    /// <summary>
    /// 电
    /// </summary>
    public readonly float AgainstElectric;
    /// <summary>
    /// 仙
    /// </summary>
    public readonly float AgainstFairy;
    /// <summary>
    /// 斗
    /// </summary>
    public readonly float AgainstFight;
    /// <summary>
    /// 火
    /// </summary>
    public readonly float AgainstFire;
    /// <summary>
    /// 飞
    /// </summary>
    public readonly float AgainstFlying;
    /// <summary>
    /// 鬼
    /// </summary>
    public readonly float AgainstGhost;
    /// <summary>
    /// 草
    /// </summary>
    public readonly float AgainstGrass;
    /// <summary>
    /// 地
    /// </summary>
    public readonly float AgainstGround;
    /// <summary>
    /// 冰
    /// </summary>
    public readonly float AgainstIce;
    /// <summary>
    /// 普
    /// </summary>
    public readonly float AgainstNormal;
    /// <summary>
    /// 毒
    /// </summary>
    public readonly float AgainstPoison;
    /// <summary>
    /// 超
    /// </summary>
    public readonly float AgainstPsychic;
    /// <summary>
    /// 岩
    /// </summary>
    public readonly float AgainstRock;
    /// <summary>
    /// 钢
    /// </summary>
    public readonly float AgainstSteel;
    /// <summary>
    /// 水
    /// </summary>
    public readonly float AgainstWater;
   
    public const int __ID__ = 493145284;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "againstBug:" + AgainstBug + ","
        + "againstDark:" + AgainstDark + ","
        + "againstDragon:" + AgainstDragon + ","
        + "againstElectric:" + AgainstElectric + ","
        + "againstFairy:" + AgainstFairy + ","
        + "againstFight:" + AgainstFight + ","
        + "againstFire:" + AgainstFire + ","
        + "againstFlying:" + AgainstFlying + ","
        + "againstGhost:" + AgainstGhost + ","
        + "againstGrass:" + AgainstGrass + ","
        + "againstGround:" + AgainstGround + ","
        + "againstIce:" + AgainstIce + ","
        + "againstNormal:" + AgainstNormal + ","
        + "againstPoison:" + AgainstPoison + ","
        + "againstPsychic:" + AgainstPsychic + ","
        + "againstRock:" + AgainstRock + ","
        + "againstSteel:" + AgainstSteel + ","
        + "againstWater:" + AgainstWater + ","
        + "}";
    }
}
}

