
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class instance : Luban.BeanBase
{
    public instance(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["map_Type"].IsNumber) { throw new SerializationException(); }  MapType = _buf["map_Type"]; }
        { if(!_buf["map_SubType"].IsNumber) { throw new SerializationException(); }  MapSubType = _buf["map_SubType"]; }
        { var __json0 = _buf["lv"]; if(!__json0.IsArray) { throw new SerializationException(); } Lv = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Lv.Add(__v0); }   }
        { if(!_buf["shield"].IsNumber) { throw new SerializationException(); }  Shield = _buf["shield"]; }
        { var __json0 = _buf["coin"]; if(!__json0.IsArray) { throw new SerializationException(); } Coin = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Coin.Add(__v0); }   }
        { if(!_buf["startStoty"].IsNumber) { throw new SerializationException(); }  StartStoty = _buf["startStoty"]; }
        { if(!_buf["jumpMap"].IsBoolean) { throw new SerializationException(); }  JumpMap = _buf["jumpMap"]; }
        { if(!_buf["endStoty"].IsNumber) { throw new SerializationException(); }  EndStoty = _buf["endStoty"]; }
        { var __json0 = _buf["reward"]; if(!__json0.IsArray) { throw new SerializationException(); } Reward = new System.Collections.Generic.Dictionary<int, int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = __e0[0]; } int _v0;  { if(!__e0[1].IsNumber) { throw new SerializationException(); }  _v0 = __e0[1]; }  Reward.Add(_k0, _v0); }   }
    }

    public static instance Deserializeinstance(JSONNode _buf)
    {
        return new instance(_buf);
    }

    /// <summary>
    /// 副本id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// ##
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 模式
    /// </summary>
    public readonly int MapType;
    /// <summary>
    /// 关卡类型
    /// </summary>
    public readonly int MapSubType;
    /// <summary>
    /// 宝可梦等级范围
    /// </summary>
    public readonly System.Collections.Generic.List<int> Lv;
    /// <summary>
    /// boss护盾数
    /// </summary>
    public readonly int Shield;
    /// <summary>
    /// 给金币数范围
    /// </summary>
    public readonly System.Collections.Generic.List<int> Coin;
    /// <summary>
    /// 开始剧情表id
    /// </summary>
    public readonly int StartStoty;
    /// <summary>
    /// 是否切换地图
    /// </summary>
    public readonly bool JumpMap;
    /// <summary>
    /// 结束剧情表id
    /// </summary>
    public readonly int EndStoty;
    /// <summary>
    /// 固定赠送道具
    /// </summary>
    public readonly System.Collections.Generic.Dictionary<int, int> Reward;
   
    public const int __ID__ = 555127957;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "mapType:" + MapType + ","
        + "mapSubType:" + MapSubType + ","
        + "lv:" + Luban.StringUtil.CollectionToString(Lv) + ","
        + "shield:" + Shield + ","
        + "coin:" + Luban.StringUtil.CollectionToString(Coin) + ","
        + "startStoty:" + StartStoty + ","
        + "jumpMap:" + JumpMap + ","
        + "endStoty:" + EndStoty + ","
        + "reward:" + Luban.StringUtil.CollectionToString(Reward) + ","
        + "}";
    }
}
}

