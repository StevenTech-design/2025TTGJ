
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class item : Luban.BeanBase
{
    public item(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["itemTips"].IsString) { throw new SerializationException(); }  ItemTips = _buf["itemTips"]; }
        { if(!_buf["sourceTips"].IsString) { throw new SerializationException(); }  SourceTips = _buf["sourceTips"]; }
        { if(!_buf["type"].IsNumber) { throw new SerializationException(); }  Type = _buf["type"]; }
        { if(!_buf["subType"].IsNumber) { throw new SerializationException(); }  SubType = _buf["subType"]; }
        { if(!_buf["icon"].IsNumber) { throw new SerializationException(); }  Icon = _buf["icon"]; }
        { if(!_buf["model"].IsString) { throw new SerializationException(); }  Model = _buf["model"]; }
        { if(!_buf["quality"].IsNumber) { throw new SerializationException(); }  Quality = _buf["quality"]; }
        { if(!_buf["operate"].IsString) { throw new SerializationException(); }  Operate = _buf["operate"]; }
        { if(!_buf["useParam"].IsString) { throw new SerializationException(); }  UseParam = _buf["useParam"]; }
        { if(!_buf["overlying"].IsNumber) { throw new SerializationException(); }  Overlying = _buf["overlying"]; }
        { if(!_buf["sortId"].IsNumber) { throw new SerializationException(); }  SortId = _buf["sortId"]; }
    }

    public static item Deserializeitem(JSONNode _buf)
    {
        return new item(_buf);
    }

    /// <summary>
    /// 道具id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 道具名称
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 道具描述
    /// </summary>
    public readonly string ItemTips;
    /// <summary>
    /// 获取途径
    /// </summary>
    public readonly string SourceTips;
    /// <summary>
    /// 类型
    /// </summary>
    public readonly int Type;
    /// <summary>
    /// 子类型
    /// </summary>
    public readonly int SubType;
    /// <summary>
    /// 道具图标
    /// </summary>
    public readonly int Icon;
    /// <summary>
    /// 道具模型
    /// </summary>
    public readonly string Model;
    /// <summary>
    /// 品质（0白色1绿色2蓝色3紫色4橙色5红色）
    /// </summary>
    public readonly int Quality;
    /// <summary>
    /// 按钮
    /// </summary>
    public readonly string Operate;
    /// <summary>
    /// 使用效果
    /// </summary>
    public readonly string UseParam;
    /// <summary>
    /// 堆叠数量
    /// </summary>
    public readonly int Overlying;
    /// <summary>
    /// 仓库排序
    /// </summary>
    public readonly int SortId;
   
    public const int __ID__ = 3242771;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "itemTips:" + ItemTips + ","
        + "sourceTips:" + SourceTips + ","
        + "type:" + Type + ","
        + "subType:" + SubType + ","
        + "icon:" + Icon + ","
        + "model:" + Model + ","
        + "quality:" + Quality + ","
        + "operate:" + Operate + ","
        + "useParam:" + UseParam + ","
        + "overlying:" + Overlying + ","
        + "sortId:" + SortId + ","
        + "}";
    }
}
}

